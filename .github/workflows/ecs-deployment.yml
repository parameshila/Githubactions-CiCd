name: ECS application deployment

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Enter the branch name'
        required: true
        default: 'paramesh-dev'
        type: string

env:
  IMAGE_REPO_NAME: "github-action-cicd"
  IMAGE_TAG: "latest"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.name }}
      
      - name: Checking context variable
        run: |
          echo "Repository name: ${{ github.repository }}"
          echo "Workflow name: ${{ github.workflow }}"
          echo "Triggered by: ${{ github.triggering_actor }}"

  ecr-push:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Assume OIDC role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: githuboidctest
      
      - name: Get Parameters from SSM
        run: |
          echo "IMAGE_REPO_NAME=$(aws ssm get-parameter --name "/GithubAction/demo/Reponame/Ecrname" --query "Parameter.Value" --output text --region us-east-1)" >> $GITHUB_ENV
          echo "IMAGE_TAG=$(aws ssm get-parameter --name "/GithubAction/demo/Tag/Imagetag" --query "Parameter.Value" --output text --region us-east-1)" >> $GITHUB_ENV
          echo "AWS_ACCOUNT_ID=$(aws ssm get-parameter --name "/GithubAction/demo/Account/Accountid" --query "Parameter.Value" --output text --region us-east-1)" >> $GITHUB_ENV
          echo "AWS_REGION=$(aws ssm get-parameter --name "/GithubAction/demo/Region/Awsregion" --query "Parameter.Value" --output text --region us-east-1)" >> $GITHUB_ENV
          echo "ECS_CLUSTER=$(aws ssm get-parameter --name "/GithubAction/demo/Reponame/Ecscluster" --query "Parameter.Value" --output text --region us-east-1)" >> $GITHUB_ENV
          echo "ECS_SERVICE=$(aws ssm get-parameter --name "/GithubAction/demo/Servicename/Ecsservice" --query "Parameter.Value" --output text --region us-east-1)" >> $GITHUB_ENV
      
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
      
      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ env.IMAGE_REPO_NAME }}:${{ env.IMAGE_TAG }} .
          docker tag ${{ env.IMAGE_REPO_NAME }}:${{ env.IMAGE_TAG }} ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_REPO_NAME }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_REPO_NAME }}:${{ env.IMAGE_TAG }}

  ecs-deploy:
    runs-on: ubuntu-latest
    needs: ecr-push
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Assume OIDC role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: githuboidctest
          
      - name: Get Parameters from SSM
        run: |
          echo "AWS_REGION=$(aws ssm get-parameter --name "/GithubAction/demo/Region/Awsregion" --query "Parameter.Value" --output text --region us-east-1)" >> $GITHUB_ENV
          echo "ECS_CLUSTER=$(aws ssm get-parameter --name "/GithubAction/demo/Reponame/Ecscluster" --query "Parameter.Value" --output text --region us-east-1)" >> $GITHUB_ENV
          echo "ECS_SERVICE=$(aws ssm get-parameter --name "/GithubAction/demo/Servicename/Ecsservice" --query "Parameter.Value" --output text --region us-east-1)" >> $GITHUB_ENV
          
      # - name: Debug Variables
      #   run: |
      #     echo "Using ECS_CLUSTER: ${{ env.ECS_CLUSTER }}"
      #     echo "Using ECS_SERVICE: ${{ env.ECS_SERVICE }}"
      #     if [[ -z "${{ env.ECS_CLUSTER }}" || -z "${{ env.ECS_SERVICE }}" ]]; then
      #       echo "Error: Missing required environment variables!"
      #       exit 1
      #     fi
      
      - name: Deployment to ECS
        run: |
          desired_task_count=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --query 'services[*].desiredCount' --output text)
          echo "Desired task count: $desired_task_count"
          
          task_arns=$(aws ecs list-tasks --cluster ${{ env.ECS_CLUSTER }} --service-name ${{ env.ECS_SERVICE }} --query 'taskArns[*]' --output text)
          if [ -n "$task_arns" ]; then
            echo "Stopping running tasks..."
            for task in $task_arns; do
              aws ecs stop-task --cluster ${{ env.ECS_CLUSTER }} --task $task
            done
          else
            echo "No tasks are currently running."
          fi
          
          echo "Restoring desired count to $desired_task_count"
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --desired-count $desired_task_count
  
  ecr-ecs-image-sha-checking:
    runs-on: ubuntu-latest #self-hosted
    needs: ecs-deploy
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Get Parameters from SSM
        run: |
          echo "AWS_REGION=$(aws ssm get-parameter --name "/GithubAction/demo/Region/Awsregion" --query "Parameter.Value" --output text --region us-east-1)" >> $GITHUB_ENV
        
      - name: Assume OIDC role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: githuboidctest

      - name: Compares ECS Task image SHA with the latest ECR image SHA
        run: |
          echo "IMAGE_REPO_NAME=$(aws ssm get-parameter --name "/GithubAction/demo/Reponame/Ecrname" --query "Parameter.Value" --output text)" >> $GITHUB_ENV
          echo "AWS_REGION=$(aws ssm get-parameter --name "/GithubAction/demo/Region/Awsregion" --query "Parameter.Value" --output text)" >> $GITHUB_ENV
          echo "ECS_CLUSTER=$(aws ssm get-parameter --name "/GithubAction/demo/Reponame/Ecscluster" --query "Parameter.Value" --output text)" >> $GITHUB_ENV
          echo "ECS_SERVICE=$(aws ssm get-parameter --name "/GithubAction/demo/Servicename/Ecsservice" --query "Parameter.Value" --output text)" >> $GITHUB_ENV
          echo "CONTAINER_NAME=$(aws ssm get-parameter --name "/GithubAction/demo/Container/Containername" --query "Parameter.Value" --output text)" >> $GITHUB_ENV
  
      - name: Debug Environment Variables
        run: |
          echo "ECS_CLUSTER: ${{ env.ECS_CLUSTER }}"
          echo "ECS_SERVICE: ${{ env.ECS_SERVICE }}"
          echo "AWS_REGION: ${{ env.AWS_REGION }}"
          echo "CONTAINER_NAME: ${{ env.CONTAINER_NAME}}"
          echo "IMAGE_REPO_NAME: ${{ env.IMAGE_REPO_NAME}}"
          
          echo "Fetching latest image SHA from ECR"
          LATEST_IMAGE_SHA=$(aws ecr describe-images --repository-name ${{env.IMAGE_REPO_NAME}} --query 'sort_by(imageDetails,&imagePushedAt)[-1].imageDigest' --output text --region ${{env.AWS_REGION}})
          if [[ -z "$LATEST_IMAGE_SHA" || "$LATEST_IMAGE_SHA" == "None" ]]; then
            echo "❌ Error: Unable to fetch latest image SHA from ECR"
          exit 1
          fi
      
          echo "✅ Latest image SHA from ECR: $LATEST_IMAGE_SHA"
      
          echo "Fetching running ECS task ARN"
  
          TASK_ARN=$(aws ecs list-tasks --cluster ${{env.ECS_CLUSTER}} --service-name ${{env.ECS_SERVICE}} --query 'taskArns[0]' --output text --region ${{env.AWS_REGION}})

          if [[ -z "$TASK_ARN" || "$TASK_ARN" == "None" ]]; then
          echo "❌ Error: No running tasks found in ECS service!"
          exit 1
          fi
          
          echo "✅ Running ECS Task ARN: $TASK_ARN"
      
          echo "Fetching running ECS Task image SHA from container"
          RUNNING_IMAGE_SHA=$(aws ecs describe-tasks --cluster ${{env.ECS_CLUSTER}} --tasks $TASK_ARN --query "tasks[0].containers[?name=='${{env.CONTAINER_NAME}}'].imageDigest" --output text --region ${{env.AWS_REGION}})
      
          if [[ -z "$RUNNING_IMAGE_SHA" || "$RUNNING_IMAGE_SHA" == "None" ]]; then
          echo "❌ Error: Unable to fetch image digest from running ECS Task!"
          exit 1
          fi
      
          echo "✅ Running image SHA from ECS Task: $RUNNING_IMAGE_SHA"
      
          if [[ "$LATEST_IMAGE_SHA" == "$RUNNING_IMAGE_SHA" ]]; then
            echo "✅ Success: ECS task is using the latest image!"
          exit 0
          else
            echo "❌ Failure: ECS task is NOT using the latest image!"
          exit 1
          fi
